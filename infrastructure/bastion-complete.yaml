AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VpcId:
    Description: What VPC would you like to associate with your Bastion Host Security Group?
    Type: AWS::EC2::VPC::Id
  
  VPCCidr:
    Description: The VPC CIDR block
    Type: String
    AllowedPattern: "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))?$"
    ConstraintDescription: The value must be valid IPv4 CIDR block.

  LatestAMI:
    Description: Static reference to latest Amazon Linux 2 AMI
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    AllowedValues:
      - '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  KeyPair:
    Description: Which Key Pair would you like to use for remote access?
    Type: 'AWS::EC2::KeyPair::KeyName'

  Subnet1:
    Description: The first subnet associated with the Bastion Host Autoscaling Group
    Type: 'AWS::EC2::Subnet::Id'
  
  Subnet2:
    Description: The second subnet associated with the Bastion Host Autoscaling Group
    Type: 'AWS::EC2::Subnet::Id'

  InstanceType:
    Description: Instance size for the Bastion Host (default - t3.micro)
    Type: String 
    AllowedValues:
      - t3.micro
    Default: t3.micro

  ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 3

  



Metadata:

  Authors:
    Description:  Periferia-IT

  Purpose:
    Description: "This template is used to create a stack that leverages ec2 autoscaling 
                  to implement a single bastion host ec2 instance and an associated security 
                  group.  The security group provides secure access to the bastion host 
                  based on the provided origin cidr block and SSH port.  SSH access to the 
                  bastion host is granted using the default ec2-user credentials and the 
                  keypair supplied via the KeyPair parameter." 

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Bastion Host Parameters"
        Parameters:
          - VpcId
          - KeyPair
          - LatestAMI
          - Subnet1
          - Subnet2
          - InstanceType
    ParameterLabels:
      VpcId:
        default: "VPC Id"
      KeyPair:
        default: "Key Pair"
      LatestAMI:
        default: "AMI"
      Subnet1:
        default: "Bastion Host Subnet 1"
      Subnet2:
        default: "Bastion Host Subnet 2"
      InstanceType:
        default: "Instance Type"


Resources:

  BastionASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Join ["", [!Ref "AWS::StackName", "-BastionHostASG"]]
      LaunchConfigurationName: !Ref BastionLaunchConfig
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      MinSize: "1"
      DesiredCapacity: "1"
      MaxSize: "1"
      Tags:
        -
          Key: Name
          Value: !Join ["", [!Ref "AWS::StackName", "-BastionHost"]]
          PropagateAtLaunch: true

  BastionLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Join ["", [!Ref "AWS::StackName", "-BastionHostLaunchConfiguration"]]
      AssociatePublicIpAddress: true
      ImageId: !Ref LatestAMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      SecurityGroups:
        - !Ref SecurityGroup

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Host Security Group
      VpcId: !Ref VpcId
      GroupName: !Join ["", [ !Ref "AWS::StackName", "-BastionHostSecurityGroup"]]

# This security group defines who/where is allowed to access the ECS hosts directly.
# By default we're just allowing access from the load balancer.  If you want to SSH 
# into the hosts, or expose non-load balanced services you can open their ports here.

  ECSHostSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
          VpcId: !Ref VpcId
          GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
          SecurityGroupIngress:
              # Only allow inbound access to ECS from the ELB
              - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup 
                IpProtocol: -1
          Tags: 
              - Key: Name
                Value: !Sub ${EnvironmentName}-ECS-Hosts

#  This security group defines who/where is allowed to access the Application Load Balancer.
#  By default, we've opened this up to the public internet (0.0.0.0/0) but can you restrict
#  it further if you want.

  LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
          VpcId: !Ref VpcId
          GroupDescription: Access to the load balancer that sits in front of ECS
          SecurityGroupIngress:
              # Allow access from anywhere to our ECS services
              - CidrIp: 0.0.0.0/0
                IpProtocol: -1
          Tags: 
              - Key: Name
                Value: !Sub ${EnvironmentName}-LoadBalancers

  EFSMountTargetSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: "Security group to allow inbound NFS for EFS mount target from ECS container instances"
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "2049"
          ToPort: "2049"
          CidrIp: !Ref VPCCidr
  
  FileSystemResource:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      BackupPolicy:
        Status: ENABLED
      PerformanceMode: maxIO
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
        - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
        - Key: Name
          Value: TestFileSystem
      # FileSystemPolicy:
      #   Version: "2012-10-17"
      #   Statement:
      #     - Effect: "Allow"
      #       Action:
      #         - "elasticfilesystem:ClientMount"
      #       Principal:
      #           AWS: 'arn:aws:iam::111122223333:role/EfsReadOnly'
      # KmsKeyId: !GetAtt 
      #   - key
      #   - Arn
  key:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action:
              - 'kms:*'
            Resource: 
              - '*'

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref Subnet1
      SecurityGroups:
      - !Ref EFSMountTargetSecurityGroup

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref Subnet2
      SecurityGroups:
      - !Ref EFSMountTargetSecurityGroup


